#! /bin/sh

# Avoid locale-related differences in the output (e.g., space before
# colons).
export LC_ALL=C

set -e

me=$(basename $0)

## BEGIN
#    git-submodules [OPTIONS] [DIRS]
#
# Handle the Git submodules of the DIRS (by default ".").
#
# Options:
#   -h, --help, -h      display this message and exit
#   -u, --update=DIR    upgrade the pinned externals directory DIR to the
#                       newest version, and upgrade.
#                       "all" means all the submodules
#   -U, --update-all    same as --update=all
#   -s, --subscribe=URL add a pinned external on URL, under the same directory
#                       name.  If there was already a dependency, pin it.
#   -n, --dry-run       display the commands, don't run them
#
# URL aliases:
#   share     git@git.lrde.epita.fr:lrde-publis-share
#
## END

## --------------------- ##
## Standard components.  ##
## --------------------- ##


stderr ()
{
    echo >&2 "$me: $@"
}

fatal ()
{
    stderr "$@"
    exit 1
}

usage ()
{
  # BSD sed is real piece of s.*t.
  sed -n '/^## BEGIN/,/^## END/{s/^#$/# /;s/^# //;/^#/!p;}' $0
}


## --------------------- ##
## Business components.  ##
## --------------------- ##

# url_aliases URL
# ---------------
# Decode the address URL, which might use other URL aliases.
# Aliases are read from the usage notice, the big comment
# at the start of this script.
url_aliases ()
{
  case $1 in
    http* | ssh* )
      echo "$1";;
    *)
      local alias=$1
      local url=$(usage |
		  sed -n "/^URL aliases:/,/^# *\$/{
			     /^ *$alias *\\([^ ].*\\)/{s//\1/;p;q;};
			 }")
      echo "$url"
      ;;
  esac
}


# git_submodules_update HOST-DIR PINNED-DIR
# -----------------------------------------
# Update all the pinned Git submodules to the most recent version.
git_submodules_update ()
{
  (
    set -e
    cd "$1"
    (
      set -e
      cd "$2"
      $run git pull
    )
    $run git add "$2"
  )
}


# git_submodules_subscribe DIR URL MODDIR
# ---------------------------------------
# Subscribe directory DIR/MODDIR to submodule at URL.  If there is
# already a module named MODDIR, ensure the passed URL matches its URL
# and pin it to the HEAD of the remote submodule.
git_submodules_subscribe ()
{
  url="$2"
  moddir="$1/$3"

  git_url_key="submodule.$moddir.url"
  if old_url=$(git config --get "$git_url_key"); then
    test "x$old_url" = "x$url" \
      || fatal "existing submodule $moddir subscribed to a different URL."
    # Pin an existing submodule.
    $run git submodule update
    (
      set -e
      $run cd "$moddir"
      $run git checkout master
      $run git pull
    )
  else
    # New subscription.
    $run git submodule add "$url" "$moddir"
    $run git submodule init
  fi
}



## ------ ##
## Main.  ##
## ------ ##

# List of upgrades.
upgrades=
# List of subscriptions.
subscriptions=
# List of directories to process.
dirs=

while test $# != 0
do
  case $1 in
    # Handle --option=value by splitting apart and putting back on argv.
    --*=*)
      opt=`echo "$1" | sed -e 's/=.*//'`
      val=`echo "$1" | sed -e 's/[^=]*=//'`
      shift
      set dummy "$opt" "$val" ${1+"$@"}; shift
      ;;

    # Handle --update-all as --update "all"
    -U | --update-all | --upgrade-all )
      shift
      set dummy --update "all" ${1+"$@"}; shift
      ;;
  esac

  case $1 in
      -h | --help )
	  usage
	  exit 0
	  ;;
      -u | --update | --upgrade )
	  if test x$2 = xall; then
	    git submodule status | while read sha1 dir ref; do
	      updates="$updates $dir"
	    done
	  else
	    updates="$updates $2"
	  fi
	  shift
	  ;;
      -s | --subscribe )
	  subscriptions="$subscriptions $2"
	  shift
	  ;;
      -n | --dry-run )
	  run=stderr
	  ;;
      -*)
	  fatal "invalid option: $1"
	  ;;
      *)
	  dirs="$dirs $1"
	  ;;
  esac
  shift
done

test -n "$dirs" || dirs=.

for d in $dirs
do
  # Did the process trigger any update?
  update=false

  for s in $subscriptions
  do
    git_submodules_subscribe "$d" $(url_aliases "$s") "$s"
    update=true
  done

  for u in $updates
  do
    git_submodules_update "$d" "$u"
    update=true
  done

  if $update; then
    stderr "You should commit, submodules were updated."
  fi
done
